// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM     1
#define NAV     2
#define FROW    3
#define NUM     4
#define FRENCH  5

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };
    macros {
        e_aigue: e_aigue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RA(GRAVE) &kp E>
                ;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <25>;
            key-positions = <22 23>;
            bindings = <&kp ESC>;
        };
        combo_enter {
            timeout-ms = <25>;
            key-positions = <5 6>;
            bindings = <&kp ESC>;
        };
        combo_del {
            timeout-ms = <25>;
            key-positions = <26 27>;
            bindings = <&kp ESC>;
        };
        combo_bootloader_left {
            timeout-ms = <25>;
            key-positions = <0 1>;
            bindings = <&bootloader>;
            layers = <2>;
        };
        combo_bootloader_right {
            timeout-ms = <25>;
            key-positions = <8 9>;
            bindings = <&bootloader>;
            layers = <2>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
//        ┌───┬────────────┬────────────┬────────────┬────────────┐   ┌────────────┬────────────┬────────────┬────────────┬───┐
//        │ Q │     W      │     E      │     R      │     T      │   │     Y      │     U      │     I      │     O      │ P │
//        ├───┼────────────┼────────────┼────────────┼────────────┤   ├────────────┼────────────┼────────────┼────────────┼───┤
//        │ A │ &ht lgui S │ &ht lsft D │ &ht lctl F │ &ht lalt G │   │ &ht lalt H │ &ht rctl J │ &ht rsft K │ &ht lgui L │ ; │
//        ├───┼────────────┼────────────┼────────────┼────────────┤   ├────────────┼────────────┼────────────┼────────────┼───┤
//        │ Z │     X      │     C      │     V      │     B      │   │     N      │     M      │     ,      │     .      │ / │
//        └───┴────────────┴────────────┼────────────┼────────────┤   ├────────────┼────────────┼────────────┴────────────┴───┘
//                                      │  lt 2 tab  │    lsft    │   │    spc     │ lt 1 bspc  │                              
//                                      └────────────┴────────────┘   └────────────┴────────────┘                              
      &kp Q   &kp W        &kp E         &kp R         &kp T            &kp Y        &kp U         &kp I         &kp O        &kp P   
      &kp A   &ht LGUI S   &ht LSHFT D   &ht LCTRL F   &ht LALT G       &ht LALT H   &ht RCTRL J   &ht RSHFT K   &ht LGUI L   &kp SEMI
      &kp Z   &kp X        &kp C         &kp V         &kp B            &kp N        &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                         &lt 2 TAB     &kp LSHFT        &kp SPACE    &lt 1 BSPC                                       
            >;
        };

        symbols_layer {
            bindings = <
//        ┌─────┬──────┬──────┬──────┬─────┐   ┌─────┬─────┬───┬───┬─────┐
//        │     │  {   │  [   │  (   │  ^  │   │  ~  │  )  │ ] │ } │     │
//        ├─────┼──────┼──────┼──────┼─────┤   ├─────┼─────┼───┼───┼─────┤
//        │     │ kp_- │ kp_* │ kp_= │  _  │   │  $  │  \  │ & │ ! │     │
//        ├─────┼──────┼──────┼──────┼─────┤   ├─────┼─────┼───┼───┼─────┤
//        │     │ kp_+ │  #   │  @   │  '  │   │  "  │  |  │ % │ ` │     │
//        └─────┴──────┴──────┼──────┼─────┤   ├─────┼─────┼───┴───┴─────┘
//                            │      │     │   │     │     │              
//                            └──────┴─────┘   └─────┴─────┘              
      &trans   &kp LBRC       &kp LBKT          &kp LPAR       &kp CARET            &kp TILDE   &kp RPAR   &kp RBKT    &kp RBRC    &trans
      &trans   &kp KP_MINUS   &kp KP_MULTIPLY   &kp KP_EQUAL   &kp UNDERSCORE       &kp DLLR    &kp BSLH   &kp AMPS    &kp EXCL    &trans
      &trans   &kp KP_PLUS    &kp HASH          &kp AT         &kp SQT              &kp DQT     &kp PIPE   &kp PRCNT   &kp GRAVE   &trans
                                                &trans         &trans               &trans      &trans                                   
            >;
        };

        nav_layer {
            bindings = <
//        ┌──────┬─────────┬─────────┬─────────┬─────┐   ┌──────┬─────────┬─────────┬──────┬─────┐
//        │      │         │         │         │     │   │      │ lctl(D) │ lctl(U) │      │     │
//        ├──────┼─────────┼─────────┼─────────┼─────┤   ├──────┼─────────┼─────────┼──────┼─────┤
//        │      │         │         │         │     │   │ left │  down   │   up    │ rght │     │
//        ├──────┼─────────┼─────────┼─────────┼─────┤   ├──────┼─────────┼─────────┼──────┼─────┤
//        │ lsft │ lctl(X) │ lctl(C) │ lctl(V) │     │   │      │         │         │      │     │
//        └──────┴─────────┴─────────┼─────────┼─────┤   ├──────┼─────────┼─────────┴──────┴─────┘
//                                   │         │     │   │      │         │                       
//                                   └─────────┴─────┘   └──────┴─────────┘                       
      &trans      &trans      &trans      &trans      &trans       &trans     &kp LC(D)   &kp LC(U)   &trans      &trans
      &trans      &trans      &trans      &trans      &trans       &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT   &trans
      &kp LSHFT   &kp LC(X)   &kp LC(C)   &kp LC(V)   &trans       &trans     &trans      &trans      &trans      &trans
                                          &trans      &trans       &trans     &trans                                    
            >;
        };

        frow_layer {
            bindings = <
//        ┌─────┬─────────┬─────────┬─────────┬─────────┐   ┌─────────┬─────────┬─────────┬─────────┬─────┐
//        │ f1  │   f2    │   f3    │   f4    │   f5    │   │   f6    │   f7    │   f8    │   f9    │ f10 │
//        ├─────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────┤
//        │ f11 │ lgui(7) │ lgui(5) │ lgui(3) │ lgui(1) │   │ lgui(2) │ lgui(4) │ lgui(6) │ lgui(8) │ f12 │
//        ├─────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────┤
//        │     │         │         │         │         │   │  mute   │  vold   │  volu   │         │     │
//        └─────┴─────────┴─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┴─────────┴─────┘
//                                  │         │         │   │         │         │                          
//                                  └─────────┴─────────┘   └─────────┴─────────┘                          
      &kp F1    &kp F2             &kp F3             &kp F4             &kp F5                 &kp F6             &kp F7             &kp F8             &kp F9             &kp F10
      &kp F11   &kp LMETA(KP_N7)   &kp LMETA(KP_N5)   &kp LMETA(KP_N3)   &kp LMETA(KP_N1)       &kp LMETA(KP_N2)   &kp LMETA(KP_N4)   &kp LMETA(KP_N6)   &kp LMETA(KP_N8)   &kp F12
      &trans    &trans             &trans             &trans             &trans                 &kp C_MUTE         &kp C_VOL_DN       &kp C_VOL_UP       &trans             &trans 
                                                      &trans             &trans                 &trans             &trans                                                          
            >;
        };

        num_layer {
            bindings = <
//        ┌─────┬─────┬─────┬─────┬─────┐   ┌──────┬──────┬──────┬──────┬─────┐
//        │     │     │     │     │     │   │ KP_7 │ KP_8 │ kp_+ │      │     │
//        ├─────┼─────┼─────┼─────┼─────┤   ├──────┼──────┼──────┼──────┼─────┤
//        │     │     │     │     │     │   │ KP_4 │ KP_6 │ kp_- │      │     │
//        ├─────┼─────┼─────┼─────┼─────┤   ├──────┼──────┼──────┼──────┼─────┤
//        │     │     │     │     │     │   │ KP_1 │ KP_2 │ kp_* │ kp_/ │     │
//        └─────┴─────┴─────┼─────┼─────┤   ├──────┼──────┼──────┴──────┴─────┘
//                          │     │     │   │ KP_0 │      │                    
//                          └─────┴─────┘   └──────┴──────┘                    
      &trans   &trans   &trans   &trans   &trans       &kp KP_7   &kp KP_8   &kp KP_PLUS       &trans          &trans
      &trans   &trans   &trans   &trans   &trans       &kp KP_4   &kp KP_6   &kp KP_MINUS      &trans          &trans
      &trans   &trans   &trans   &trans   &trans       &kp KP_1   &kp KP_2   &kp KP_MULTIPLY   &kp KP_DIVIDE   &trans
                                 &trans   &trans       &kp KP_0   &trans                                             
            >;
        };

        french_layer {
            bindings = <
//        ┌─────┬─────┬─────┬─────────┬──────────┐   ┌─────┬─────┬─────┬─────┬─────┐
//        │     │     │     │ ralt(C) │ &e_aigue │   │     │     │     │     │     │
//        ├─────┼─────┼─────┼─────────┼──────────┤   ├─────┼─────┼─────┼─────┼─────┤
//        │     │     │     │         │          │   │     │     │     │     │     │
//        ├─────┼─────┼─────┼─────────┼──────────┤   ├─────┼─────┼─────┼─────┼─────┤
//        │     │     │     │         │          │   │     │     │     │     │     │
//        └─────┴─────┴─────┼─────────┼──────────┤   ├─────┼─────┼─────┴─────┴─────┘
//                          │         │          │   │     │     │                  
//                          └─────────┴──────────┘   └─────┴─────┘                  
      &trans   &trans   &trans   &kp RA(C)   &e_aigue       &trans   &trans   &trans   &trans   &trans
      &trans   &trans   &trans   &trans      &trans         &trans   &trans   &trans   &trans   &trans
      &trans   &trans   &trans   &trans      &trans         &trans   &trans   &trans   &trans   &trans
                                 &trans      &trans         &trans   &trans                           
            >;
        };
    };
};
